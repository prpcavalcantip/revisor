import streamlit as st
import re

# Fun√ß√µes de checagem
def menciona_grafico_ou_imagem(texto):
    return bool(re.search(r'(gr[a√°]fico|imagem|figura|tabela|diagrama)', texto, re.IGNORECASE))

def tem_contexto(texto):
    # Checagem simples: procura palavras indicativas de contexto
    return bool(re.search(r'(situa[c√ß][√£a]o|contexto|hist[o√≥]ria|caso|cen[a√°]rio|exemplo|baseado)', texto, re.IGNORECASE))

def revisar_questao(q, idx):
    relatorio = []
    alternativas = [a.strip() for a in q['alternativas'] if a.strip()]
    if len(alternativas) != 5:
        relatorio.append(f"Quest√£o {idx+1}: n√∫mero de alternativas diferente de 5.")
    if len(set(alternativas)) != 5:
        relatorio.append(f"Quest√£o {idx+1}: alternativas repetidas.")
    if not tem_contexto(q['enunciado']):
        relatorio.append(f"Quest√£o {idx+1}: falta contextualiza√ß√£o.")
    if menciona_grafico_ou_imagem(q['enunciado']) and not q['tem_imagem']:
        relatorio.append(f"Quest√£o {idx+1}: menciona gr√°fico/imagem, mas n√£o est√° presente.")
    # Simula√ß√£o de checagem de gram√°tica, ortografia e flu√™ncia
    if len(q['enunciado'].split()) < 8:
        relatorio.append(f"Quest√£o {idx+1}: enunciado muito curto (pode prejudicar a flu√™ncia/contexto).")
    return relatorio

st.set_page_config(page_title="Revisor de Provas - Col√©gio √äxodo", layout="wide")
st.title("üìù Revisor de Provas - Col√©gio √äxodo")

st.markdown("""
Este aplicativo revisa automaticamente provas de m√∫ltipla escolha dos professores, analisando:
- Quantidade de quest√µes (m√≠nimo 15, m√°ximo 20)
- Gram√°tica, ortografia e flu√™ncia do enunciado (simula√ß√£o)
- Todas as quest√µes s√£o de m√∫ltipla escolha e possuem 5 alternativas (a-e)
- Quest√µes contextualizadas
- N√£o pode haver alternativas repetidas
- Se o enunciado mencionar gr√°fico/figura, a imagem deve estar presente
""")

with st.form("prova_form"):
    num_q = st.number_input("Quantidade de quest√µes", min_value=1, max_value=30, value=15)
    questoes = []
    for i in range(num_q):
        st.markdown(f"---\n### Quest√£o {i+1}")
        enunciado = st.text_area(f"Enunciado da quest√£o {i+1}", key=f"enun_{i}")
        alternativas = []
        cols = st.columns(5)
        for j, letra in enumerate(['a', 'b', 'c', 'd', 'e']):
            alternativas.append(cols[j].text_input(f"{letra})", key=f"{i}_{letra}"))
        tem_imagem = st.checkbox("Possui gr√°fico/figura/imagem?", key=f"img{i}")
        questoes.append({
            "enunciado": enunciado,
            "alternativas": alternativas,
            "tem_imagem": tem_imagem
        })
    enviar = st.form_submit_button("Revisar Prova")

if enviar:
    relatorio_global = []
    if not (15 <= num_q <= 20):
        relatorio_global.append("A prova deve ter entre 15 e 20 quest√µes.")
    for idx, q in enumerate(questoes):
        relatorio_global += revisar_questao(q, idx)
    st.markdown("## Resultado da Revis√£o")
    if not relatorio_global:
        st.success("APROVADO ‚úÖ Sua prova est√° de acordo com todos os crit√©rios!")
    else:
        st.error("REVISAR ‚ùå Sua prova apresenta pend√™ncias:")
        for item in relatorio_global:
            st.write("-", item)
